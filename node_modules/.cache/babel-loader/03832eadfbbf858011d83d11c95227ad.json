{"ast":null,"code":"var _jsxFileName = \"/Users/vady.tih/Mycreate/it-incubator/homeworks-by-ignat/homeworks/src/p2-homeworks/h4/common/c3-SuperCheckbox/SuperCheckbox.tsx\";\nimport React from 'react';\nimport s from './SuperCheckbox.module.css'; // тип пропсов обычного инпута\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SuperCheckbox = _ref => {\n  let {\n    type,\n    // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n    onChange,\n    onChangeChecked,\n    className,\n    spanClassName,\n    children,\n    // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n    ...restProps // все остальные пропсы попадут в объект restProps\n\n  } = _ref;\n\n  const onChangeCallback = e => {\n    // сделайте так чтоб работал onChange и onChangeChecked\n    onChange && onChangeChecked;\n  };\n\n  const finalInputClassName = `${s.checkbox} ${className ? className : ''}`;\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: 'checkbox',\n      onChange: onChangeCallback,\n      className: finalInputClassName,\n      ...restProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), children && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: s.spanClassName,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this) // благодаря label нажатие на спан передастся в инпут\n  ;\n};\n\n_c = SuperCheckbox;\nexport default SuperCheckbox;\n\nvar _c;\n\n$RefreshReg$(_c, \"SuperCheckbox\");","map":{"version":3,"sources":["/Users/vady.tih/Mycreate/it-incubator/homeworks-by-ignat/homeworks/src/p2-homeworks/h4/common/c3-SuperCheckbox/SuperCheckbox.tsx"],"names":["React","s","SuperCheckbox","type","onChange","onChangeChecked","className","spanClassName","children","restProps","onChangeCallback","e","finalInputClassName","checkbox"],"mappings":";AAAA,OAAOA,KAAP,MAAyE,OAAzE;AACA,OAAOC,CAAP,MAAc,4BAAd,C,CAEA;;;;AAQA,MAAMC,aAA+C,GAAG,QASnD;AAAA,MARD;AACIC,IAAAA,IADJ;AACU;AACNC,IAAAA,QAFJ;AAEcC,IAAAA,eAFd;AAGIC,IAAAA,SAHJ;AAGeC,IAAAA,aAHf;AAIIC,IAAAA,QAJJ;AAIc;AAEV,OAAGC,SANP,CAMgB;;AANhB,GAQC;;AACD,QAAMC,gBAAgB,GAAIC,CAAD,IAAsC;AAC3D;AACAP,IAAAA,QAAQ,IAAIC,eAAZ;AACH,GAHD;;AAKA,QAAMO,mBAAmB,GAAI,GAAEX,CAAC,CAACY,QAAS,IAAGP,SAAS,GAAGA,SAAH,GAAe,EAAG,EAAxE;AAEA,sBACI;AAAA,4BACI;AACI,MAAA,IAAI,EAAE,UADV;AAEI,MAAA,QAAQ,EAAEI,gBAFd;AAGI,MAAA,SAAS,EAAEE,mBAHf;AAAA,SAKQH;AALR;AAAA;AAAA;AAAA;AAAA,YADJ,EAQKD,QAAQ,iBAAI;AAAM,MAAA,SAAS,EAAEP,CAAC,CAACM,aAAnB;AAAA,gBAAmCC;AAAnC;AAAA;AAAA;AAAA;AAAA,YARjB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CAUa;AAVb;AAYH,CA7BD;;KAAMN,a;AA+BN,eAAeA,aAAf","sourcesContent":["import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\nimport s from './SuperCheckbox.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n    onChangeChecked?: (checked: boolean) => void\n    spanClassName?: string\n}\n\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeChecked,\n        className, spanClassName,\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        // сделайте так чтоб работал onChange и onChangeChecked\n        onChange && onChangeChecked\n    }\n\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\n\n    return (\n        <label>\n            <input\n                type={'checkbox'}\n                onChange={onChangeCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n            />\n            {children && <span className={s.spanClassName}>{children}</span>}\n        </label> // благодаря label нажатие на спан передастся в инпут\n    )\n}\n\nexport default SuperCheckbox\n"]},"metadata":{},"sourceType":"module"}