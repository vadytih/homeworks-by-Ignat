{"ast":null,"code":"var _jsxFileName = \"/Users/vady.tih/Mycreate/it-incubator/homeworks-by-ignat/homeworks/src/p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.tsx\";\nimport React from 'react';\nimport s from './SuperInputText.module.css'; // тип пропсов обычного инпута\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SuperInputText = _ref => {\n  let {\n    type,\n    // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n    onChange,\n    onChangeText,\n    onKeyPress,\n    onEnter,\n    error,\n    className,\n    spanClassName,\n    ...restProps // все остальные пропсы попадут в объект restProps\n\n  } = _ref;\n\n  const onChangeCallback = e => {\n    onChange // если есть пропс onChange\n    && onChange(e); // то передать ему е (поскольку onChange не обязателен)\n\n    onChangeText && onChangeText(e.currentTarget.value);\n  };\n\n  const onKeyPressCallback = e => {\n    onKeyPress && onKeyPress(e);\n    onEnter // если есть пропс onEnter\n    && e.key === 'Enter' // и если нажата кнопка Enter\n    && onEnter(); // то вызвать его\n  };\n\n  const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`;\n  const finalInputClassName = `${s.errorInput} ${className ? className : ''}`; // need to fix with (?:) and\n  // s.superInput\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: 'text',\n      onChange: onChangeCallback,\n      onKeyPress: onKeyPressCallback,\n      className: finalInputClassName,\n      ...restProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: finalSpanClassName,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true);\n};\n\n_c = SuperInputText;\nexport default SuperInputText;\n\nvar _c;\n\n$RefreshReg$(_c, \"SuperInputText\");","map":{"version":3,"sources":["/Users/vady.tih/Mycreate/it-incubator/homeworks-by-ignat/homeworks/src/p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.tsx"],"names":["React","s","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","className","spanClassName","restProps","onChangeCallback","e","currentTarget","value","onKeyPressCallback","key","finalSpanClassName","finalInputClassName","errorInput"],"mappings":";AAAA,OAAOA,KAAP,MAAwF,OAAxF;AACA,OAAOC,CAAP,MAAc,6BAAd,C,CAEA;;;;;AAYA,MAAMC,cAAiD,GAAG,QAUrD;AAAA,MATD;AACIC,IAAAA,IADJ;AACU;AACNC,IAAAA,QAFJ;AAEcC,IAAAA,YAFd;AAGIC,IAAAA,UAHJ;AAGgBC,IAAAA,OAHhB;AAIIC,IAAAA,KAJJ;AAKIC,IAAAA,SALJ;AAKeC,IAAAA,aALf;AAOI,OAAGC,SAPP,CAOgB;;AAPhB,GASC;;AACD,QAAMC,gBAAgB,GAAIC,CAAD,IAAsC;AAC3DT,IAAAA,QAAQ,CAAC;AAAD,OACLA,QAAQ,CAACS,CAAD,CADX,CAD2D,CAE5C;;AAEfR,IAAAA,YAAY,IAAIA,YAAY,CAACQ,CAAC,CAACC,aAAF,CAAgBC,KAAjB,CAA5B;AACH,GALD;;AAMA,QAAMC,kBAAkB,GAAIH,CAAD,IAAwC;AAC/DP,IAAAA,UAAU,IAAIA,UAAU,CAACO,CAAD,CAAxB;AAEAN,IAAAA,OAAO,CAAC;AAAD,OACJM,CAAC,CAACI,GAAF,KAAU,OADb,CACqB;AADrB,OAEGV,OAAO,EAFV,CAH+D,CAKlD;AAChB,GAND;;AAQA,QAAMW,kBAAkB,GAAI,GAAEjB,CAAC,CAACO,KAAM,IAAGE,aAAa,GAAGA,aAAH,GAAmB,EAAG,EAA5E;AACA,QAAMS,mBAAmB,GAAI,GAAElB,CAAC,CAACmB,UAAW,IAAGX,SAAS,GAAGA,SAAH,GAAe,EAAG,EAA1E,CAhBC,CAgB2E;AAC5E;;AAEA,sBACI;AAAA,4BACI;AACI,MAAA,IAAI,EAAE,MADV;AAEI,MAAA,QAAQ,EAAEG,gBAFd;AAGI,MAAA,UAAU,EAAEI,kBAHhB;AAII,MAAA,SAAS,EAAEG,mBAJf;AAAA,SAMQR;AANR;AAAA;AAAA;AAAA;AAAA,YADJ,EASKH,KAAK,iBAAI;AAAM,MAAA,SAAS,EAAEU,kBAAjB;AAAA,gBAAsCV;AAAtC;AAAA;AAAA;AAAA;AAAA,YATd;AAAA,kBADJ;AAaH,CA1CD;;KAAMN,c;AA4CN,eAAeA,cAAf","sourcesContent":["import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\nimport s from './SuperInputText.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n}\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value)\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        onEnter // если есть пропс onEnter\n        && e.key === 'Enter' // и если нажата кнопка Enter\n        && onEnter() // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\n    const finalInputClassName = `${s.errorInput} ${className ? className : ''}` // need to fix with (?:) and\n    // s.superInput\n\n    return (\n        <>\n            <input\n                type={'text'}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {error && <span className={finalSpanClassName}>{error}</span>}\n        </>\n    )\n}\n\nexport default SuperInputText\n"]},"metadata":{},"sourceType":"module"}