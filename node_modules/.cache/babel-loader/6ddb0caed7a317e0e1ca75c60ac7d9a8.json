{"ast":null,"code":"import _objectSpread from\"/Users/vady.tih/Mycreate/it-incubator-new/homeworks-by-Ignat/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"/Users/vady.tih/Mycreate/it-incubator-new/homeworks-by-Ignat/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";var _excluded=[\"type\",\"onChange\",\"onChangeText\",\"onKeyPress\",\"onEnter\",\"error\",\"className\",\"spanClassName\"];import React from'react';import s from'./SuperInputText.module.css';// тип пропсов обычного инпута\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var SuperInputText=function SuperInputText(_ref){var type=_ref.type,onChange=_ref.onChange,onChangeText=_ref.onChangeText,onKeyPress=_ref.onKeyPress,onEnter=_ref.onEnter,error=_ref.error,className=_ref.className,spanClassName=_ref.spanClassName,restProps=_objectWithoutProperties(_ref,_excluded);var onChangeCallback=function onChangeCallback(e){onChange// если есть пропс onChange\n&&onChange(e);// то передать ему е (поскольку onChange не обязателен)\nonChangeText&&onChangeText(e.currentTarget.value);};var onKeyPressCallback=function onKeyPressCallback(e){onKeyPress&&onKeyPress(e);onEnter// если есть пропс onEnter\n&&e.key==='Enter'// и если нажата кнопка Enter\n&&onEnter();// то вызвать его\n};var finalSpanClassName=\"\".concat(s.error,\" \").concat(spanClassName?spanClassName:'');var finalInputClassName=\"\".concat(s.errorInput,\" \").concat(className?className:'');// need to fix with (?:) and\n// s.superInput\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"input\",_objectSpread({type:'text',onChange:onChangeCallback,onKeyPress:onKeyPressCallback,className:finalInputClassName},restProps)),error&&/*#__PURE__*/_jsx(\"span\",{className:finalSpanClassName,children:error})]});};export default SuperInputText;","map":{"version":3,"sources":["/Users/vady.tih/Mycreate/it-incubator-new/homeworks-by-Ignat/src/p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.tsx"],"names":["React","s","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","className","spanClassName","restProps","onChangeCallback","e","currentTarget","value","onKeyPressCallback","key","finalSpanClassName","finalInputClassName","errorInput"],"mappings":"maAAA,MAAOA,CAAAA,KAAP,KAAwF,OAAxF,CACA,MAAOC,CAAAA,CAAP,KAAc,6BAAd,CAEA;6IAYA,GAAMC,CAAAA,cAAiD,CAAG,QAApDA,CAAAA,cAAoD,MAUrD,IARGC,CAAAA,IAQH,MARGA,IAQH,CAPGC,QAOH,MAPGA,QAOH,CAPaC,YAOb,MAPaA,YAOb,CANGC,UAMH,MANGA,UAMH,CANeC,OAMf,MANeA,OAMf,CALGC,KAKH,MALGA,KAKH,CAJGC,SAIH,MAJGA,SAIH,CAJcC,aAId,MAJcA,aAId,CAFMC,SAEN,0CACD,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,CAAD,CAAsC,CAC3DT,QAAS;AAAD,EACLA,QAAQ,CAACS,CAAD,CADX,CACe;AAEfR,YAAY,EAAIA,YAAY,CAACQ,CAAC,CAACC,aAAF,CAAgBC,KAAjB,CAA5B,CACH,CALD,CAMA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACH,CAAD,CAAwC,CAC/DP,UAAU,EAAIA,UAAU,CAACO,CAAD,CAAxB,CAEAN,OAAQ;AAAD,EACJM,CAAC,CAACI,GAAF,GAAU,OAAQ;AADrB,EAEGV,OAAO,EAFV,CAEa;AAChB,CAND,CAQA,GAAMW,CAAAA,kBAAkB,WAAMjB,CAAC,CAACO,KAAR,aAAiBE,aAAa,CAAGA,aAAH,CAAmB,EAAjD,CAAxB,CACA,GAAMS,CAAAA,mBAAmB,WAAMlB,CAAC,CAACmB,UAAR,aAAsBX,SAAS,CAAGA,SAAH,CAAe,EAA9C,CAAzB,CAA4E;AAC5E;AAEA,mBACI,wCACI,4BACI,IAAI,CAAE,MADV,CAEI,QAAQ,CAAEG,gBAFd,CAGI,UAAU,CAAEI,kBAHhB,CAII,SAAS,CAAEG,mBAJf,EAMQR,SANR,EADJ,CASKH,KAAK,eAAI,aAAM,SAAS,CAAEU,kBAAjB,UAAsCV,KAAtC,EATd,GADJ,CAaH,CA1CD,CA4CA,cAAeN,CAAAA,cAAf","sourcesContent":["import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\nimport s from './SuperInputText.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n}\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value)\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        onEnter // если есть пропс onEnter\n        && e.key === 'Enter' // и если нажата кнопка Enter\n        && onEnter() // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\n    const finalInputClassName = `${s.errorInput} ${className ? className : ''}` // need to fix with (?:) and\n    // s.superInput\n\n    return (\n        <>\n            <input\n                type={'text'}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {error && <span className={finalSpanClassName}>{error}</span>}\n        </>\n    )\n}\n\nexport default SuperInputText\n"]},"metadata":{},"sourceType":"module"}